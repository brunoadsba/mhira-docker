--- 
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
# We are using chybie/node-aws-cli image which contains npm and aws-cli tools
#
# Also you need to specify AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in
# pipeline environment variables for push to s3 to work
#
# Pipeline is configured to run only on master branch, but you can configure
# additional branches if required
image: node:latest

# enable Docker for your repository
options:
  docker: true

definitions:
  
  services:
    docker:
      memory: 2048

  steps:
    - step: &install
        name: Installation
        caches:
          - node
        script:
          - npm ci

    - step: &lint
        name: Lint
        caches:
          - node
        script:
          - npm run lint

    - parallel:      # build steps will run in parallel
      
      - step: &build
          name: Build
          caches:
            - node
          script:
            - npm run build
          artifacts:
            - dist/**
      
      - step: &build-docker
          name: Build docker image
          caches:
            - docker
          #python image with aws-cli installed
          image: amazon/aws-cli
          script:
            # aws login
            - if ! [[ $AWS_REGISTRY_URL == public.ecr.aws* ]]; then aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_REGISTRY_URL}; fi
            - if [[ $AWS_REGISTRY_URL == public.ecr.aws* ]]; then aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws; fi
            # docker
            - export BUILD_ID=$BITBUCKET_BRANCH_$BITBUCKET_COMMIT_$BITBUCKET_BUILD_NUMBER
            - docker build -t ${AWS_REGISTRY_URL}:$BUILD_ID .
            - docker push ${AWS_REGISTRY_URL}:$BUILD_ID
            - docker tag ${AWS_REGISTRY_URL}:$BUILD_ID ${AWS_REGISTRY_URL}:development
            - docker push ${AWS_REGISTRY_URL}:development
          services:
            - docker

pipelines:
  pull-requests:
    '**':
      - step: *install
      - step: *lint
      - step: *build

  branches:
    
    feature/docker-build:   
      - step: *build-docker
            
    develop:
      - step: *install
      - step: *lint
      - step: *build
      - step:
          name: Deploy Dev
          caches:
            - node
          script:
              # - ssh deploy@api.mhira.net 'rm -rf /var/www/api.mhira.net/dist'
              # - ssh deploy@api.mhira.net 'rm -rf /var/www/api.mhira.net/node_modules'
              - pipe: atlassian/rsync-deploy:0.4.3
                variables:
                  USER: 'deploy'
                  SERVER: 'api.mhira.net'
                  REMOTE_PATH: '/var/www/dev-api.mhira.net/dist'
                  LOCAL_PATH: './dist/*'
                  # SSH_KEY: '<string>' # Optional.
                  # SSH_PORT: '<string>' # Optional.
                  # EXTRA_ARGS: '<string>' # Optional.
                  # DEBUG: '<boolean>' # Optional.
                  DELETE_FLAG: 'true' # Optional.
              - pipe: atlassian/rsync-deploy:0.4.3
                variables:
                  USER: 'deploy'
                  SERVER: 'api.mhira.net'
                  REMOTE_PATH: '/var/www/dev-api.mhira.net/node_modules'
                  LOCAL_PATH: './node_modules/*'
                  # SSH_KEY: '<string>' # Optional.
                  # SSH_PORT: '<string>' # Optional.
                  EXTRA_ARGS: '--links' # Optional.
                  # DEBUG: '<boolean>' # Optional.
                  DELETE_FLAG: 'true' # Optional.
              - ssh deploy@api.mhira.net 'pm2 restart DEV-MHIRA-API'
  
    master:
      - step: *install
      - step: *lint
      - step: *build
      - step:
          name: Deploy Staging
          caches:
            - node
          script:
              # - ssh deploy@api.mhira.net 'rm -rf /var/www/api.mhira.net/dist'
              # - ssh deploy@api.mhira.net 'rm -rf /var/www/api.mhira.net/node_modules'
              - pipe: atlassian/rsync-deploy:0.4.3
                variables:
                  USER: 'deploy'
                  SERVER: 'api.mhira.net'
                  REMOTE_PATH: '/var/www/staging-api.mhira.net/dist'
                  LOCAL_PATH: './dist/*'
                  # SSH_KEY: '<string>' # Optional.
                  # SSH_PORT: '<string>' # Optional.
                  # EXTRA_ARGS: '<string>' # Optional.
                  # DEBUG: '<boolean>' # Optional.
                  DELETE_FLAG: 'true' # Optional.
              - pipe: atlassian/rsync-deploy:0.4.3
                variables:
                  USER: 'deploy'
                  SERVER: 'api.mhira.net'
                  REMOTE_PATH: '/var/www/staging-api.mhira.net/node_modules'
                  LOCAL_PATH: './node_modules/*'
                  # SSH_KEY: '<string>' # Optional.
                  # SSH_PORT: '<string>' # Optional.
                  EXTRA_ARGS: '--links' # Optional.
                  # DEBUG: '<boolean>' # Optional.
                  DELETE_FLAG: 'true' # Optional.
              - ssh deploy@api.mhira.net 'pm2 restart STAGING-MHIRA-API'
          